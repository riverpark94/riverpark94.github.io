---
layout: post
title: '[Python] TIL 2. 입출력 방법(1) - print함수'
date: 2020-06-09 16:55:44 +0900
subtitle: ' print함수'
category: PROGRAMING_STUDY
tags: Python
comments: true
toc: true
---

> 1. `print()` 함수의 사용법을 살펴본다.
> 2. 이스케이프 문자의 활용법에 대해서 알아본다.
> 3. 입력인수 `end`에 대해서 알아본다.

`print()`는 사용자가 변수의 값을 출력하는 함수이다.

`print()`는 지금까지 사용한 것 처럼 변수의 값을 출력하는 기능을 가지고 있다. 또한, 여러개 값을 동시에 출력할 수도 있다.

```python
a = '안녕'
print(a)
# => '안녕'

b = 2
print(b)
# => 2

print(a, b)
# => '안녕' 2
```

`print()`는 변수를 출력하는 방법도 있지만, 괄호 안에 원하는 값(숫자형이든 문자형이든)울 입력하면 바로 별도 변수 지정 없이 원하는 값을 출력해준다는 특징도 가지고 있다.

```python
print('안녕')
# => 안녕
print(2)
# => 2
```


# 1. 값 여러개 출력하기

따옴표(" 나 ')로 감싸진 문자열의 나열은 `+` 연산과 동일하다.

```python
print("Hello" "Python")
# => HelloPython
print("Hello" + "Python")
# => HelloPython
```

숫자형의 출력 값은 문자열과 다르다. 값 사이에 공백을 주면 구분 오류가 발생하고, 값 사이에 `+` 연산을 주면 덧셈을 결과 값을 출력한다. 

```python
# 구분 오류 발생
print(1 2 3)
# =>     print(1 2 3)
# =>             ^
# => SyntaxError: invalid syntax 

# 덧셈으로 결과 출력
print(1 + 2 + 3)
# => 6
```

값 사이에 공백이 아닌 다른 문자를 넣고 싶을때 

- `print()`의 `sep`에 문자 또는 문자열을 지정, `sep`는 구분자라는 뜻의 separator라는 뜻이다.
- `print(값1, 값2, sep = '문자 또는 문자열')`
- `print(변수1, 변수2, sep = '문자 또는 문자열')`

``` python
print(1, 2, 3, sep = ', ')   # sep이 없으면 1 2 3 출력, sep에 콤마와 공백을 지정
print(4, 5, 6, sep = ',')    # sep이 없으면 4 5 6 출력, sep에 콤마만 지정
print('hello', 'python', sep = ' ')   # sep에 빈 문자열을 지정
print(1920, 1080, sep = 'x')   # sep에 빈 문자열을 지정
# => 1, 2, 3
# => 4,5,6
# => hello python
# => 1920x1080
```

<br>

***

# 2. 이스케이프 문자(`\`)

  이스케이프 문자(escape sequence)는 어느 책에서는 이스케이프 코드, 특수 문자열 등으로 불리지만 본 블로그에서는 이스케리프 문자로 통일한다 이스케이프 문자는 백슬래시(`\`)와 특정문자(알파벳,',? 등)을 조합한 것으로 프로그래밍을 할때 사용할 수 있도록 미리 정의해 둔 '문자 조합'이다. 파이썬에서의 이스케이프 문자는 다음과 같다.

![title](/assets/img/PROGRAMING STUDY/Python/TIL2/2020-06-09-Python-TIL2-1.png){: width=90% height=90%}

이중에서 자주 사용하는 것은 `\n`, `\t`, `\b`, `\\`, `\'`, `\"` 정도이다. 

###     2.1 `\n`

```python
print(1, 2, 3, sep = '\n')
# => 1
# => 2
# => 3

#아래와 동일한 값 출력
print('1\n2\n3')
# => 1
# => 2
# => 3
```

###     2.2 `\t`

```python
print("\t탭키\t연습")
# =>  탭키  연습
```

###     2.3 `\b`

```python
print('doesn\'t')   # 오류 발생
# => doesn't
```

```python
# 오류 발생
print('doesn't')   
# =>   File "<stdin>", line 1
# =>     print('doesn't')
# =>                  ^
# => SyntaxError: invalid syntax
```

```python
print("doesn't")   # 작은 따옴표 안에 큰 따옴표
# => "doesn't"

print(1920, 1080, sep = 'x')   # 작은 따옴표 안에 큰 따옴표
# => doesn"t
```

<br>

***

# 3. 입력인수 `end`

입력 인수 `end`를 이용해 끝 문자를 지정해주면 된다. `end`는 현재 `print()`가 끝난 뒤에 그 다음 오는 `print()`에 영향을 준다. 원래는 기본적으로 `print()`의 `end`에 `\n`이 지정된 상태인데 빈 문자열을 지정하면 강제로 `\n`를 지워준다. 형태는 다음과 같다.

```python
print(1, end = '')
print(2, end = '')
print(3)
# => 123
```

